#include <vtkType.h>
#include <vtkIdList.h>
#include <vtkTriangle.h>
#include <vtkPolyData.h>
#include <vtkCellData.h>

#include "BaseOperator.h"
#include "SurfaceAreaOperator.h"

SurfaceAreaOperator::SurfaceAreaOperator()
{
	surfaceArea=0.0;
}

double distance2D(double* a, double* b)
{
	double delX = b[0]-a[0];
	double delY = b[1]-a[1];
	return sqrt(delX*delX+delY*delY); 
}

vtkSmartPointer<vtkDataSet> SurfaceAreaOperator::process(const vtkSmartPointer<vtkDataSet> ds)
{
	vtkSmartPointer<vtkPolyData> pd = vtkPolyData::SafeDownCast(ds);
	//reset surface area
	surfaceArea = 0.0;
	//If pd is null then we it's not a polydata object
	//and therfore we can't compute the surface area.
	if(!pd)
	{
		cout<<"input to SurfaceAreaOperator is not polydata!"<<endl;
		return pd;
	}
	
	vtkSmartPointer<vtkPolyData> retval = vtkSmartPointer<vtkPolyData>::New();
	
	int numPts = pd->GetNumberOfPoints();
	// Empty array check
	if (numPts==0||(pd->GetNumberOfPolys()==0 && pd->GetNumberOfLines()==0))
	{
		cout<<"Input to SurfaceAreaOperator has no polygons or points!"<<endl;
		//vtkErrorMacro("No points/cells to operate on");
		return pd;
	}

	// vtkData
	vtkSmartPointer<vtkIdList> vertices = vtkSmartPointer<vtkIdList>::New();
	vtkSmartPointer<vtkTriangle> facet = vtkSmartPointer<vtkTriangle>::New();
	//Holds current verteces index
	int v[2];

	//Stores each vertex xyz values.
	double points[3][3];

	//data init
	int face = 0;
	int numFaces = pd->GetNumberOfCells();
	int nv = 0;
	//FIXME: when a 2D polydata object contains both lines and polygon elements
	//representing the same data. The end result is a doubling of surface area.
	//loop through each face
	for (face = 0; face < numFaces; face++)
	{
		pd->GetCellPoints(face,vertices);
		nv = vertices->GetNumberOfIds();

		//Get the actual xyz point information for each vertex of the polygon
		pd->GetPoint(vertices->GetId(0),points[0]);
		pd->GetPoint(vertices->GetId(1),points[1]);

		//For 2-d use Euclidean distance formula
		if(nv==2)
		{
			surfaceArea+=distance2D(points[0],points[1]);
		}
		//For 3-D use triangle area function.
		else if(nv==3)
		{
			pd->GetPoint(vertices->GetId(2),points[2]);
			surfaceArea += double(facet->TriangleArea(points[0],points[1],points[2]));
		}
		//All lines must be stored in one polygon calculate perimeter of polygon
		else
		{
			for(int i = 0; i<(nv-1); i++)
			{
				pd->GetPoint(vertices->GetId(i),points[0]);
				pd->GetPoint(vertices->GetId(i+1),points[1]);
				surfaceArea+=distance2D(points[0],points[1]);
			}
			pd->GetPoint(vertices->GetId(nv-1),points[0]);
			pd->GetPoint(vertices->GetId(0),points[1]);
			surfaceArea+=distance2D(points[0],points[1]);
		}
	}

	return pd;

}
double SurfaceAreaOperator::getSurfaceArea() const
{
	return surfaceArea;	
}
